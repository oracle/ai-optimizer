## Copyright (c) 2024, 2025, Oracle and/or its affiliates.
## Licensed under the Universal Permissive License v1.0 as shown at http://oss.oracle.com/licenses/upl.
# spell-checker: ignore ollama

# fullnameOverride: will override the default naming convention: <release-name>-<chart-name>
# Use with caution, as it disables Helm's automatic naming and can cause name collisions.
fullnameOverride: ""

# nameOverride: changes only the chart name portion of resource names but keeps the release name prefix.
nameOverride: ""

# -----------------------
# -- Global Configuration
global:
  # -- Either provide the 'apiKey' directly or provide a secretName referring to an existing Secret containing the API key.
  api:
    # -- Key for making API calls to the server.
    # Recommended to supply at command line or use the secretName to avoid storing in the values file.
    # Example: "abcd1234opt5678"
    apiKey: ""

    # -- Name of the Secret that stores the API key.
    # This allows you to keep the API key out of the values file and manage it securely via Secrets.
    # Example: "optimizer-api-keys"
    secretName: ""

    # -- Key name inside the Secret that contains the API key when secretName defined.
    secretKey: "apiKey"

  # -- URL path appended to the host.
  # Example: "/test" results in URLs like http://hostname/test/...
  baseUrlPath: "/"

# -----------------------
# Server Configuration
server:
  # -- Number of desired pod replicas for the Deployment when autoscaling is disabled
  replicaCount: 1

  # autoscaling: HPA when enabled, requires metrics-server to be installed
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  # -- Secret name containing image pull secrets
  imagePullSecrets: []
    # - name: registry_cred

  # image: Image and Tag to pull including pull policy
  image:
    # -- Image Repository
    repository: localhost/ai-optimizer-server
    pullPolicy: IfNotPresent
    # -- Image Tag
    tag: latest

  # service: type of Kubernetes service to expose server port.
  service:
    type: "ClusterIP"

  # ingress: controls the Ingress resource to expose the service.
  ingress:
    enabled: false
    className: nginx # IngressClass name (e.g., "nginx" for NGINX ingress controller)
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/upstream-vhost: "localhost"
    tls: []
      # - hosts:
      #     - example.com
      #   secretName: example-tls

  # -- Oracle Database Configuration
  database:
    # -- Either SIDB-FREE, ADB-FREE, ADB-S (OCI), or OTHER
    type: ""
    # -- For SIDB-FREE/ADB-FREE, location of the image and its tag; Exclude for ADB-S
    image:
      # -- For SIDB-FREE/ADB-FREE, repository location of the image
      repository: ""
      pullPolicy: IfNotPresent
      # -- For SIDB-FREE/ADB-FREE, tag of the image
      tag: latest

    # -- For ADB-S, OCID of the Autonomous Database
    # Exclude for SIDB-FREE/ADB-FREE/OTHER
    oci:
      # -- OCID of the Autonomous Database
      ocid: ""

    # -- For OTHER; Database connectivity
    # Either provide 'dsn' OR all of (host, port, service_name)
    other:
      # -- Full DSN string (e.g: mydbhost.com:1521/mydb_service)
      # If provided, supersedes host/port/service_name
      dsn: ""
      # -- Database host (e.g: mydbhost.com)
      # Required if dsn is not provided
      host: ""
      # -- Database port (e.g: 1521)
      # Required if dsn is not provided
      port: ""
      # -- Database service name (e.g: mydb_service)
      # Required if dsn is not provided
      service_name: ""

    # -- Application User Authentication/Connection Details
    authN:
      # -- Name of Secret containing the authentication/connection details
      secretName: "db-authn"
      # -- Key in secretName containing the username
      usernameKey: "username"
      # -- Key in secretName containing the password
      passwordKey: "password"
      # -- Key in secretName containing the connection service name
      serviceKey: "service"
    # -- (Optional) Privileged User Authentication/Connection Details
    # If defined, used to create the user defined in the authN secret
    privAuthN:
      # -- secretName containing privileged user (i.e. ADMIN/SYSTEM) password
      secretName: "db-priv-authn"
      # -- Key in secretName containing the username
      usernameKey: "username"
      # -- Key in secretName containing the password
      passwordKey: "password"

  # -- Oracle Cloud Infrastructure Configuration
  oci_config:
    # -- Enable Workload Identity Principals (WIP) (must be implemented)
    oke: false
    # -- Tenancy OCID.  Required when specifying keySecretName.
    tenancy: ""
    # -- User OCID.  Required when specifying keySecretName.
    user: ""
    # -- Fingerprint.  Required when specifying keySecretName.
    fingerprint: ""
    # -- Region. Required when oke is true.
    region: ""
    # -- Secret containing an OCI config file and the key_file(s).
    # Use the scripts/oci_config.py script to help create the secret based on an existing ~.oci/config file
    fileSecretName: ""
    # -- Secret containing a single API key corresponding to above tenancy configuration
    # This used by OraOperator when not running in OKE
    keySecretName: ""

  # -- Specify secretName and secretKey to enable 3rd-Party Models
  models:
    # -- OpenAI API Key
    openAI:
      secretName: ""
      secretKey: "apiKey"
    # -- Perplexity API Key
    perplexity:
      secretName: ""
      secretKey: "apiKey"
    # -- Cohere API Key
    cohere:
      secretName: ""
      secretKey: "apiKey"

  # livenessProbe: defines settings for the liveness probe.
  # Set `enabled` to false to disable the probe entirely.
  livenessProbe:
    enabled: true
    initialDelaySeconds: 10       # Time (in seconds) to wait before starting the probe
    periodSeconds: 30             # Time (in seconds) between probe checks
    timeoutSeconds: 30            # Time (in seconds) to wait for probe response
    failureThreshold: 10          # Number of failures before marking the container as unhealthy
    successThreshold: 1           # Number of successes required to consider the container healthy

  # readinessProbe: defines settings for the liveness probe.
  # Set `enabled` to false to disable the probe entirely.
  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 15
    timeoutSeconds: 15
    failureThreshold: 10
    successThreshold: 1

  # volumes: user defined additional volumes
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # volumeMounts:  user defined additional volumeMounts
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  # podLabels: additional key:value labels to add to pods
  podLabels: {}
    # environment: "production"
    # team: "devops"

  # podAnnotations: additional key:value annotations to add to the Pod template metadata
  podAnnotations: {}
    # prometheus.io/scrape: "true"
    # prometheus.io/port: "9102"

  # resources: requests and limits for the container
  # Recommended not to specify default resources and to leave this as a conscious choice for the user.
  # This also increases chances charts run on environments with little resources, such as Kind.
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # nodeSelector: to constrain pods to specific nodes
  nodeSelector: {}
    # disktype: ssd

  # affinity: rules for scheduling pods
  affinity: {}
    # podAntiAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     - labelSelector:
    #         matchExpressions:
    #           - key: app
    #             operator: In
    #             values:
    #               - my-app
    #       topologyKey: "kubernetes.io/hostname"

  # tolerations: for scheduling pods on tainted nodes
  tolerations: []
    # - key: "key1"
    #   operator: "Exists"
    #   effect: "NoSchedule"


# -----------------------
# Client Configuration
client:
  # -- Enable frontend client
  enabled: true
  # -- Number of desired pod replicas for the Deployment when autoscaling is disabled
  replicaCount: 1

  # autoscaling: HPA when enabled, requires metrics-server to be installed
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  # -- Secret name containing image pull secrets
  imagePullSecrets: []
    # - name: registry_cred

  # image: Image and Tag to pull including pull policy
  image:
    # -- Image Repository
    repository: localhost/ai-optimizer-client
    # -- Image Tag
    tag: latest
    pullPolicy: IfNotPresent

  # service: type of Kubernetes service to expose the HTTP port.
  service:
    type: "ClusterIP"

  # ingress: controls the Ingress resource to expose the service.
  ingress:
    enabled: false
    className: nginx # IngressClass name (e.g., "nginx" for NGINX ingress controller)
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/upstream-vhost: "localhost"
    tls: []
      # - hosts:
      #     - example.com
      #   secretName: example-tls

  # -- Disable specific client features
  features:
    # -- Disable the Test Bed
    disableTestbed: false
    # -- Disable the API Server Administration/Monitoring
    disableApi: false
    # -- Disable Tools such as Prompt Engineering and Split/Embed
    disableTools: false
    # -- Disable Tools Database Configuration
    disableDbCfg: false
    # -- Disable Tools Model Configuration
    disableModelCfg: false
    # -- Disable OCI Configuration
    disableOciCfg: false
    # -- Disable the Import/Export of Settings
    disableSettings: false

  # livenessProbe: defines settings for the liveness probe.
  # Set `enabled` to false to disable the probe entirely.
  livenessProbe:
    enabled: true
    initialDelaySeconds: 20       # Time (in seconds) to wait before starting the probe
    periodSeconds: 20             # Time (in seconds) between probe checks
    timeoutSeconds: 1             # Time (in seconds) to wait for probe response
    failureThreshold: 3           # Number of failures before marking the container as unhealthy
    successThreshold: 1           # Number of successes required to consider the container healthy

  # readinessProbe: defines settings for the liveness probe.
  # Set `enabled` to false to disable the probe entirely.
  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 15
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1

  # volumes: user defined additional volumes
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # volumeMounts:  user defined additional volumeMounts
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  # podLabels: additional key:value labels to add to pods
  podLabels: {}
    # environment: "production"
    # team: "devops"

  # podAnnotations: additional key:value annotations to add to the Pod template metadata
  podAnnotations: {}
    # prometheus.io/scrape: "true"
    # prometheus.io/port: "9102"

  # resources: requests and limits for the container
  # Recommended not to specify default resources and to leave this as a conscious choice for the user.
  # This also increases chances charts run on environments with little resources, such as Kind.
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # nodeSelector: to constrain pods to specific nodes
  nodeSelector: {}
    # disktype: ssd

  # affinity: rules for scheduling pods
  affinity: {}
    # podAntiAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     - labelSelector:
    #         matchExpressions:
    #           - key: app
    #             operator: In
    #             values:
    #               - my-app
    #       topologyKey: "kubernetes.io/hostname"

  # tolerations: for scheduling pods on tainted nodes
  tolerations: []
    # - key: "key1"
    #   operator: "Exists"
    #   effect: "NoSchedule"

# -----------------------
# Ollama Configuration
ollama:
  # -- Enable out-of-box Ollama Models
  enabled: false

  # -- Number of desired pod replicas for the Deployment
  replicaCount: 1

  # imagePullSecrets: Secret name containing image pull secrets
  imagePullSecrets: []
    # - name: registry_cred

  # image: Image and Tag to pull including pull policy
  image:
    # -- Image Repository
    repository: docker.io/ollama/ollama
    # -- Image Tag
    tag: latest
    pullPolicy: IfNotPresent

  # service: type of Kubernetes service to expose the HTTP port.
  service:
    http:
      type: "ClusterIP"

  # models: to automatically deploy if enabled
  models:
    # -- Enable automatic pulling of models
    enabled: true
    # -- List of models to automatically pull
    modelPullList:
      - llama3.1
      - mxbai-embed-large

  # livenessProbe: defines settings for the liveness probe.
  # Set `enabled` to false to disable the probe entirely.
  livenessProbe:
    enabled: true
    initialDelaySeconds: 20       # Time (in seconds) to wait before starting the probe
    periodSeconds: 20             # Time (in seconds) between probe checks
    timeoutSeconds: 1             # Time (in seconds) to wait for probe response
    failureThreshold: 3          # Number of failures before marking the container as unhealthy
    successThreshold: 1           # Number of successes required to consider the container healthy

  # readinessProbe: defines settings for the liveness probe.
  # Set `enabled` to false to disable the probe entirely.
  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 15
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1

  # podLabels: additional key:value labels to add to pods
  podLabels: {}
    # environment: "production"
    # team: "devops"

  # podAnnotations: additional key:value annotations to add to the Pod template metadata
  podAnnotations: {}
    # prometheus.io/scrape: "true"
    # prometheus.io/port: "9102"

  # -- Requests and limits for the container.
  # Often used to ensure pod is running on a GPU worker
  resources: {}
    # limits:
    #   nvidia.com/gpu: 1

  # -- Constrain pods to specific nodes
  # Often used to ensure pod is running on a GPU worker
  nodeSelector: {}
    # disktype: ssd

  # -- Rules for scheduling pods
  # Often used to ensure pod is running on a GPU worker
  affinity: {}
    # podAntiAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     - labelSelector:
    #         matchExpressions:
    #           - key: app
    #             operator: In
    #             values:
    #               - my-app
    #       topologyKey: "kubernetes.io/hostname"

  # -- For scheduling pods on tainted nodes
  # Often used to ensure pod is running on a GPU worker
  tolerations: []
    # - key: "key1"
    #   operator: "Exists"
    #   effect: "NoSchedule"