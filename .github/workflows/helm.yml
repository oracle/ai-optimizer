# Workflow for validating Helm chart is production-ready
name: Helm Chart Validation

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
    paths:
      - 'helm/**'
      - '.github/workflows/helm.yml'

  push:
    branches:
      - main
    paths:
      - 'helm/**'

  # Allows running this workflow manually
  workflow_dispatch:

jobs:
  validate:
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.15.0'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install validation tools
        run: |
          # Install yamllint for YAML linting
          pip install yamllint==1.35.1

          # Install kubeconform for Kubernetes schema validation
          curl -sSLo kubeconform.tar.gz \
            https://github.com/yannh/kubeconform/releases/download/v0.6.4/kubeconform-linux-amd64.tar.gz
          tar xf kubeconform.tar.gz
          sudo mv kubeconform /usr/local/bin/

          # Install helm-docs for documentation validation
          curl -sSLo helm-docs.tar.gz \
            https://github.com/norwoodj/helm-docs/releases/download/v1.13.1/helm-docs_1.13.1_Linux_x86_64.tar.gz
          tar xf helm-docs.tar.gz
          sudo mv helm-docs /usr/local/bin/

      - name: Lint Helm Chart YAML
        run: |
          echo "Running yamllint on Helm templates..."
          yamllint -c .github/yamllint-config.yaml helm/

      - name: Helm Lint
        run: |
          echo "Running helm lint..."
          helm lint helm/ --strict

      - name: Validate Chart Metadata
        run: |
          echo "Validating Chart.yaml metadata..."

          # Check required fields
          if ! grep -q "^apiVersion: v2" helm/Chart.yaml; then
            echo "ERROR: Chart.yaml must use apiVersion v2"
            exit 1
          fi

          if ! grep -q "^type: application" helm/Chart.yaml; then
            echo "ERROR: Chart.yaml must specify type: application"
            exit 1
          fi

          # Validate version format (semantic versioning)
          VERSION=$(grep "^version:" helm/Chart.yaml | awk '{print $2}')
          if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "ERROR: Chart version must follow semantic versioning (x.y.z)"
            exit 1
          fi

          echo "Chart metadata validation passed"

      - name: Template Helm Chart (default values)
        run: |
          echo "Testing helm template with default values..."
          helm template ai-optimizer helm/ --debug > /tmp/default-manifest.yaml
          echo "Successfully templated with default values"

      - name: Template Helm Chart (test scenarios)
        run: |
          echo "Testing various configuration scenarios..."

          # Test with ingress enabled
          helm template ai-optimizer helm/ \
            --set server.ingress.enabled=true \
            --set client.ingress.enabled=true \
            --debug > /tmp/ingress-manifest.yaml

          # Test with autoscaling enabled
          helm template ai-optimizer helm/ \
            --set server.autoscaling.enabled=true \
            --set server.autoscaling.maxReplicas=10 \
            --debug > /tmp/hpa-manifest.yaml

          # Test with Ollama enabled
          helm template ai-optimizer helm/ \
            --set ollama.enabled=true \
            --debug > /tmp/ollama-manifest.yaml

          # Test with API key provided
          helm template ai-optimizer helm/ \
            --set global.api.apiKey=test-key-12345 \
            --debug > /tmp/apikey-manifest.yaml

          # Test with database type ADB-S
          helm template ai-optimizer helm/ \
            --set server.database.type=ADB-S \
            --set server.database.oci.ocid=ocid1.autonomousdatabase.test \
            --debug > /tmp/adb-manifest.yaml

          echo "All configuration scenarios templated successfully"

      - name: Validate Kubernetes Manifests with kubeconform
        run: |
          echo "Validating Kubernetes manifests against schemas..."

          # Validate default manifest
          kubeconform -strict -summary \
            -kubernetes-version 1.28.0 \
            -schema-location default \
            -schema-location 'https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json' \
            /tmp/default-manifest.yaml

          echo "Kubernetes manifest validation passed"

      - name: Check for Production Best Practices
        run: |
          echo "Checking for production readiness best practices..."

          ISSUES=0

          # Check for resource limits/requests in default values
          if grep -q "resources: {}" helm/values.yaml; then
            echo "WARNING: Resource limits/requests are empty by default"
            echo "Consider setting recommended values for production"
            ISSUES=$((ISSUES + 1))
          fi

          # Check for security contexts
          if ! grep -rq "securityContext:" helm/templates/; then
            echo "WARNING: No securityContext found in templates"
            echo "Consider adding security contexts for production"
            ISSUES=$((ISSUES + 1))
          fi

          # Check for health probes
          if ! grep -rq "livenessProbe:" helm/templates/server/deployment.yaml; then
            echo "ERROR: Server deployment missing liveness probe"
            exit 1
          fi

          if ! grep -rq "readinessProbe:" helm/templates/server/deployment.yaml; then
            echo "ERROR: Server deployment missing readiness probe"
            exit 1
          fi

          # Check for image pull policy
          if grep -q 'pullPolicy: Always' helm/values.yaml; then
            echo "INFO: Using 'Always' pull policy - ensure this is intended for production"
          fi

          # Check for hardcoded secrets
          if grep -rq "password:" helm/templates/ | grep -v "passwordKey:" | grep -v "secretName:" | grep -v "{{"; then
            echo "ERROR: Potential hardcoded passwords found in templates"
            exit 1
          fi

          echo "Production best practices check completed with $ISSUES warnings"

      - name: Test Helm Install (dry-run)
        run: |
          echo "Testing helm install with dry-run..."
          helm install ai-optimizer helm/ \
            --dry-run \
            --debug \
            --set global.api.apiKey=test-key-12345

          echo "Helm install dry-run completed successfully"

      - name: Test Helm Upgrade (dry-run)
        run: |
          echo "Testing helm upgrade with dry-run..."
          helm upgrade ai-optimizer helm/ \
            --install \
            --dry-run \
            --debug \
            --set global.api.apiKey=test-key-12345 \
            --set server.replicaCount=2

          echo "Helm upgrade dry-run completed successfully"

      - name: Generate Documentation
        run: |
          echo "Generating Helm chart documentation..."
          helm-docs helm/

          # Check if README was generated/updated
          if [ -f helm/README.md ]; then
            echo "Helm chart documentation generated successfully"
          else
            echo "WARNING: No README.md generated for Helm chart"
          fi

      - name: Verify Chart Dependencies
        run: |
          echo "Checking for chart dependencies..."
          if [ -f helm/Chart.lock ]; then
            echo "Chart.lock found, verifying dependencies..."
            helm dependency update helm/
          else
            echo "No dependencies defined"
          fi

      - name: Package Helm Chart
        run: |
          echo "Packaging Helm chart..."
          helm package helm/ --destination /tmp/

          # List the packaged chart
          ls -lh /tmp/*.tgz

          echo "Helm chart packaged successfully"

      - name: Upload Helm Chart Artifact
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart
          path: /tmp/*.tgz
          retention-days: 30

      - name: Validation Summary
        if: always()
        run: |
          echo "================================================"
          echo "Helm Chart Validation Summary"
          echo "================================================"
          echo "Chart Name: ai-optimizer"
          echo "Chart Version: $(grep '^version:' helm/Chart.yaml | awk '{print $2}')"
          echo "App Version: $(grep '^appVersion:' helm/Chart.yaml | awk '{print $2}')"
          echo "================================================"
          echo "All validation checks completed!"
