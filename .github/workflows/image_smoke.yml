# Workflow for validating container image builds
name: Validate Container Images

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
    paths:
      - "src/**"
      - "pyproject.toml"
      - ".github/workflows/image_smoke.yml"

  # Allows running this workflow manually
  workflow_dispatch:

jobs:
  # Build and test all container images with optimized caching
  image-build-test:
    if: github.event.pull_request.draft == false || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        build:
          - name: aio
            dockerfile: src/Dockerfile
          - name: client
            dockerfile: src/client/Dockerfile
          - name: server
            dockerfile: src/server/Dockerfile

    name: Build & Test - ${{ matrix.build.name }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Use official Docker Buildx action for better caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Optimized caching with content-based keys
      - name: Cache Docker Layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.build.name }}-${{ hashFiles('src/**', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.build.name }}-
            ${{ runner.os }}-buildx-

      # Build using official action (replaces manual docker buildx commands)
      - name: Build Container Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.build.dockerfile }}
          tags: ${{ matrix.build.name }}:${{ github.sha }}
          load: ${{ matrix.build.name == 'aio' }}
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Move cache to avoid ever-growing cache
      # Reference: https://github.com/docker/build-push-action/issues/252
      - name: Move Cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Security scanning - only AIO (contains both server and client)
      - name: Run Trivy Security Scan
        if: matrix.build.name == 'aio'
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: image
          image-ref: "aio:${{ github.sha }}"
          severity: HIGH,CRITICAL
          format: sarif
          output: trivy-results-aio.sarif
          ignore-unfixed: true
          exit-code: 0

      # Upload security results to GitHub Security tab
      - name: Upload Trivy Results to GitHub Security
        if: matrix.build.name == 'aio'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results-aio.sarif
          category: trivy-aio

      # Smoke test - only AIO (contains both server and client)
      - name: Smoke Test - Verify Container Starts
        if: matrix.build.name == 'aio'
        run: |
          echo "Testing AIO image startup..."

          # Start container in background
          docker run -d --name test-aio \
            -e API_SERVER_KEY=test-key-for-ci \
            aio:${{ github.sha }}

          # Wait for startup (max 30 seconds)
          for i in {1..30}; do
            if docker logs test-aio 2>&1 | grep -qE "Application startup complete|Uvicorn running|Starting server|Streamlit"; then
              echo "✅ Container started successfully"
              docker logs test-aio | tail -20
              docker stop test-aio
              exit 0
            fi
            sleep 1
          done

          echo "❌ Container failed to start within 30 seconds"
          docker logs test-aio
          docker stop test-aio || true
          exit 1

      - name: Cleanup Test Container
        if: always() && matrix.build.name == 'aio'
        run: |
          docker stop test-aio 2>/dev/null || true
          docker rm test-aio 2>/dev/null || true

  # Summary job
  image-validation-summary:
    name: Validation Summary
    if: github.event.pull_request.draft == false || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [image-build-test]

    steps:
      - name: All Validations Passed
        run: |
          echo "================================================"
          echo "✅ All container image validations passed!"
          echo "================================================"
          echo "- Image builds (aio, client, server): ✅"
          echo "- Security scan (AIO only): ✅"
          echo "- Smoke test (AIO only): ✅"
